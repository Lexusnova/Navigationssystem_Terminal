#include "Data.h"

#include <typeinfo>

Data::Data()
{
    
}

Data::~Data()
{
    storage.clear();
}

void Data::menueAusgabe()
{
    cout<< "(1) Ort Anlegen " << endl
        << "(2) Karte Anzeigen" << endl
        << "(3) Karte Berechnen"  << endl
        << "(4) Karte Expotieren/Importieren" << endl
        << "(0) Navigationssystem verlassen" << endl;
}

void Data::ortAnlegen()
{
    cout << "- (1) Adresse " 
         << "- (2) Point of Interest " << endl;
    cout << "Geben sie ein was sie erstellen möchten" << endl;
    int userInput;
    cin >> userInput;

    if (userInput == 1) {
        int id, hausnummer, postleitzahl;
        double laengenGrad, breitenGrad;
        string strasse, gemeide;

        cout << "Geben sie bitte die ID,LÄNGENGRAD, BREITENGRAD,STRASSE, HAUSNUMMER, POSTLEITZAHL, GEMEIDE ein" << endl;
        cout << "Geben sie die ID, HAUSNUMMER, POSTLEIZZAHL ein" << endl;
        cin >> id >> hausnummer >> postleitzahl;
        cout << "Geben sie die LÄNGENGRAD, BREITENGRAD ein " << endl;
        cin >> laengenGrad >> breitenGrad;
        cout << "Geben sie die STRASSE, GEMEIDE ein " << endl;
        cin >> strasse >> gemeide;
        Adresse* adresse = new Adresse(id, laengenGrad, breitenGrad, strasse, hausnummer, postleitzahl, gemeide);
        storage.push_back(adresse);
    } else {
        int id;
        double laengenGrad, breitenGrad;
        string kategorie, bemerkung;

        cout << "Geben sie bitte die ID, LÄNGENGRAD, BREITENGRAD, KATEGORIE, BEMERKUNG ein " << endl;
        cin >> id;
        cin >> laengenGrad >> breitenGrad;
        cin >> kategorie >> bemerkung;
        PointOfInterest* user = new PointOfInterest(id, laengenGrad, breitenGrad, kategorie, bemerkung);
        storage.push_back(user);
    }
    
}

void Data::karteAnzeigen()
{
    system("clear");
    vector<PointOfInterest*> info;
    vector<Adresse*> stats;
    const int size = storage.size();
    for (int i = 0; i < size; i++) {
        //Dynamic Cast funktioniert nur mit Klassen
        if (PointOfInterest *temp = dynamic_cast<PointOfInterest*>(storage[i])) {
            info.push_back(temp);
        } else if (Adresse *adresse = dynamic_cast<Adresse*>(storage[i])) { 
            stats.push_back(adresse);
        }
    }
    sortInformation(info, stats);

    for (size_t i = 0; i < info.size(); i++)
    {
        info[i]->show();
        cout << endl;
    }
    for (size_t i = 0; i < stats.size(); i++)
    {
        stats[i]->show();
        cout << endl;
    }
}

void Data::sortInformation(vector<PointOfInterest*> &temp, vector<Adresse*> &adresse)
{
    for (size_t i = 1; i < temp.size(); i++)
      {
         for (size_t j = 0;j < temp.size()-1; j++)
         {
             if (temp[j]->getId() > temp[j+1]->getId())
             {
                 swap(temp[j], temp[j+1]);
             }
         }
    }

    for (size_t i = 1; i < adresse.size(); i++)
      {
         for (size_t j = 0;j < adresse.size()-1; j++)
         {
             if (adresse[j]->getId() > adresse[j+1]->getId())
             {
                 swap(adresse[j], adresse[j+1]);
             }
         }
    }
}

void Data::entfernungBerechnen()
{

}

void Data::exportData()
{

}

void Data::importData()
{

}
